{"version":3,"sources":["data.ts","pages/Home.tsx","pages/Lobby.tsx","firebase.ts","components/Mcq.tsx","components/NumEstimate.tsx","questions.ts","pages/GameComponent.tsx","state.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ScreenState","reducer","prevState","action","type","self","screenState","state","currentGame","game","console","warn","Home","dispatch","beginSubscription","useState","gameCode","setGameCode","onChangeUsername","useCallback","e","userName","target","value","uid","placeholder","maxLength","onChange","style","padding","onClick","disabled","Lobby","startGame","gameRef","useFirestore","collection","doc","membersRef","useFirestoreDocData","status","data","useFirestoreCollectionData","memberStatus","members","useEffect","GAME","amAdmin","admin","code","map","member","backgroundColor","isAdmin","name","firebaseConfig","JSON","parse","process","app","firebase","initializeApp","auth","db","firestore","signInAnonymously","catch","err","log","Mcq","question","memberRef","changeMcq","updatedAnswers","answers","length","answer","parseInt","update","onChangeConf","confidence","parseFloat","solution","shuffle","options","s","i","shuffledOpts","ansVal","checked","min","max","step","NumEstimate","onChangeVal","toLocaleString","range","questions","prompt","GameComponent","playState","currentQuestionIdx","showingScoreboard","currentTime","score","gameOver","addQuestionToMemberStack","questionIdx","a","get","defaultAnswer","forEach","ref","FieldValue","arrayUnion","computeScores","lastAns","Math","log2","increment","gameTick","interval","incrementingQuestion","curQuestion","clearInterval","timeAllotted","App","useReducer","HOME","useRef","onAuthStateChanged","user","error","exists","isSpectator","set","LOBBY","alert","randomCode","times","random","toString","join","numQuestions","onTick","current","gameState","q","slice","int","setInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","firebaseApp","document","getElementById"],"mappings":"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","file":"static/js/main.8bb77900.chunk.js","sourcesContent":["import React from \"react\";\n\nexport type Self = {\n  userName: string;\n  uid: string;\n};\n\nexport type Solution =\n  | { type: \"num\"; range: [number, number]; answer: number }\n  | { type: \"mcq\"; options: string[]; answer: number };\n\nexport type Question = {\n  prompt: string;\n  solution: Solution;\n};\n\nexport type PlayState = {\n  type: \"play\";\n  currentQuestionIdx: number;\n  questions: number[];\n  currentTime: number;\n  showingScoreboard: boolean;\n  gameOver: boolean;\n};\n\nexport type LobbyState = {\n  type: \"lobby\";\n};\n\nexport type GameState = PlayState | LobbyState;\n\nexport type Answer = {\n  questionIdx: number;\n  answer: number;\n  confidence: number;\n};\n\nexport type Member = {\n  uid: string;\n  name: string;\n  isAdmin: boolean;\n  isSpectator: boolean;\n  score: number;\n  answers: Answer[];\n};\n\nexport type Game = {\n  code: string;\n  admin: string;\n  timeAllotted: number;\n  numQuestions: number;\n  state: GameState;\n};\n\nexport enum ScreenState {\n  HOME,\n  LOBBY,\n  GAME,\n}\n\nexport type State = {\n  self: Self;\n  screenState: ScreenState;\n  currentGame: string;\n};\n\nexport type Action =\n  | {\n      type: \"SET_SELF\";\n      self: Self;\n    }\n  | { type: \"SET_SCREEN\"; state: ScreenState }\n  | { type: \"SET_GAME\"; game: string };\n\nexport type Dispatch = React.Dispatch<Action>;\n\nexport const reducer = (prevState: State, action: Action): State => {\n  switch (action.type) {\n    case \"SET_SELF\":\n      return { ...prevState, self: action.self };\n    case \"SET_SCREEN\":\n      return { ...prevState, screenState: action.state };\n    case \"SET_GAME\":\n      return { ...prevState, currentGame: action.game };\n    default:\n      console.warn(\"reducer fallthrough\");\n      return prevState;\n  }\n};\n","import { useCallback, useState } from \"react\";\nimport { Dispatch, State } from \"../data\";\n\nconst Home = ({\n  state,\n  dispatch,\n  beginSubscription,\n}: {\n  state: State;\n  dispatch: Dispatch;\n  beginSubscription: (code?: string) => void;\n}) => {\n  const [gameCode, setGameCode] = useState(\"\");\n  const onChangeUsername = useCallback(\n    (e) => {\n      dispatch({\n        type: \"SET_SELF\",\n        self: { ...state.self, userName: e.target.value },\n      });\n    },\n    [dispatch, state]\n  );\n  return (\n    <div>\n      <h1>Credence Calibration</h1>\n      {state.self.uid === \"\" ? (\n        \"waiting for firebase...\"\n      ) : (\n        <div>\n          <div>\n            <label>\n              My username{\" \"}\n              <input\n                type=\"text\"\n                placeholder=\"username\"\n                maxLength={30}\n                value={state.self.userName}\n                onChange={onChangeUsername}\n              />\n            </label>\n          </div>\n\n          <div style={{ padding: \"1em\" }}>\n            <label>\n              game code{\" \"}\n              <input\n                type=\"text\"\n                value={gameCode}\n                onChange={(e) => setGameCode(e.target.value)}\n                maxLength={20}\n                placeholder=\"game code\"\n              />\n            </label>\n            <button\n              onClick={() => beginSubscription(gameCode)}\n              disabled={state.self.userName === \"\" || gameCode === \"\"}\n            >\n              Join Game\n            </button>\n          </div>\n          <div style={{ padding: \"1em\" }}>\n            <button\n              onClick={() => beginSubscription()}\n              disabled={state.self.userName === \"\"}\n            >\n              Create Game\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default Home;\n","import { useEffect } from \"react\";\nimport {\n  useFirestore,\n  useFirestoreCollectionData,\n  useFirestoreDocData,\n} from \"reactfire\";\nimport { Dispatch, Game, Member, ScreenState, State } from \"../data\";\n\nconst Lobby = ({\n  state,\n  dispatch,\n  startGame,\n}: {\n  state: State;\n  dispatch: Dispatch;\n  startGame: () => void;\n}) => {\n  const gameRef = useFirestore().collection(\"games\").doc(state.currentGame);\n  const membersRef = gameRef.collection(\"members\");\n  const { status, data: game } = useFirestoreDocData<Game>(gameRef);\n  const { status: memberStatus, data: members } =\n    useFirestoreCollectionData<Member>(membersRef);\n  useEffect(() => {\n    if (game && game.state.type === \"play\") {\n      dispatch({ type: \"SET_SCREEN\", state: ScreenState.GAME });\n    }\n  }, [game, dispatch]);\n  if (status !== \"success\" || memberStatus !== \"success\") {\n    return <div>loading...</div>;\n  }\n\n  const amAdmin = game.admin === state.self.uid;\n  return (\n    <div>\n      <h1>Lobby</h1>\n      <h2>code {game.code}</h2>\n      {amAdmin && <button onClick={startGame}>start game</button>}\n      <div>\n        {(members).map((member) => (\n          <div\n            key={member.uid}\n            style={{\n              backgroundColor: member.isAdmin ? \"#ffe70b7f\" : \"rgba(0,0,0,0)\",\n            }}\n          >\n            {member.name}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Lobby;\n","import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = JSON.parse(process.env.REACT_APP_FIREBASE ?? \"{}\");\nexport const app = firebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const db = firebase.firestore();\nexport const firestore = firebase.firestore;\nexport type docRef =\n  firebase.firestore.DocumentReference<firebase.firestore.DocumentData>;\n\nauth.signInAnonymously().catch((err) => console.log(err));\n","import { shuffle } from \"lodash\";\nimport { useCallback, useState } from \"react\";\nimport { useFirestoreDocData } from \"reactfire\";\nimport { Member, Question } from \"../data\";\nimport { docRef } from \"../firebase\";\nconst Mcq = ({\n  question,\n  memberRef,\n}: {\n  question: Question;\n  memberRef: docRef;\n}) => {\n  const { data, status } = useFirestoreDocData<Member>(memberRef);\n  const changeMcq = useCallback(\n    (e) => {\n      const updatedAnswers = [...data.answers];\n      updatedAnswers[updatedAnswers.length - 1] = {\n        ...updatedAnswers[updatedAnswers.length - 1],\n        answer: parseInt(e.target.value, 10),\n      };\n      memberRef.update({ answers: updatedAnswers });\n    },\n    [memberRef, data]\n  );\n  const onChangeConf = useCallback(\n    (e) => {\n      const updatedAnswers = [...data.answers];\n      updatedAnswers[updatedAnswers.length - 1] = {\n        ...updatedAnswers[updatedAnswers.length - 1],\n        confidence: parseFloat(e.target.value),\n      };\n      memberRef.update({ answers: updatedAnswers });\n    },\n    [memberRef, data]\n  );\n  const [shuffledOpts, setShuffledOpts] = useState(\n    question.solution.type === \"mcq\"\n      ? shuffle(question.solution.options.map((s, i) => ({ s, i })))\n      : []\n  );\n  if (status !== \"success\" || data.answers.length < 1) {\n    return <div>loading...</div>;\n  }\n\n  const ansVal = data.answers[data.answers.length - 1];\n  return (\n    <div>\n      <div>\n        {shuffledOpts.map(({ s, i }) => (\n          <div key={s + i}>\n            <input\n              type=\"radio\"\n              value={i}\n              checked={ansVal.answer === i}\n              onChange={changeMcq}\n            />{\" \"}\n            {s}\n          </div>\n        ))}\n      </div>\n      <div>your confidence: {ansVal.confidence * 100}%</div>\n      <label>\n        50%\n        <input\n          type=\"range\"\n          min={0.5}\n          max={1}\n          step={0.05}\n          value={ansVal.confidence}\n          onChange={onChangeConf}\n        />{\" \"}\n        100%\n      </label>\n    </div>\n  );\n};\nexport default Mcq;\n","import { useCallback } from \"react\";\nimport { useFirestoreDocData } from \"reactfire\";\nimport { Member, Question } from \"../data\";\nimport { docRef } from \"../firebase\";\n\nconst NumEstimate = ({\n  question,\n  memberRef,\n}: {\n  question: Question;\n  memberRef: docRef;\n}) => {\n  const { data, status } = useFirestoreDocData<Member>(memberRef);\n  const onChangeVal = useCallback(\n    (e) => {\n      const updatedAnswers = [...data.answers];\n      updatedAnswers[updatedAnswers.length - 1] = {\n        ...updatedAnswers[updatedAnswers.length - 1],\n        answer: parseInt(e.target.value, 10),\n      };\n      memberRef.update({ answers: updatedAnswers });\n    },\n    [memberRef, data]\n  );\n  const onChangeConf = useCallback(\n    (e) => {\n      const updatedAnswers = [...data.answers];\n      updatedAnswers[updatedAnswers.length - 1] = {\n        ...updatedAnswers[updatedAnswers.length - 1],\n        confidence: parseFloat(e.target.value),\n      };\n      memberRef.update({ answers: updatedAnswers });\n    },\n    [memberRef, data]\n  );\n  if (status !== \"success\" || data.answers.length < 1) {\n    return <div>loading...</div>;\n  }\n  if (question.solution.type !== \"num\") {\n    return <div>error</div>;\n  }\n  const ansVal = data.answers[data.answers.length - 1];\n  return (\n    <div>\n      <div>your estimate: {ansVal.answer.toLocaleString()}</div>\n      <label>\n        {question.solution.range[0].toLocaleString()}{\" \"}\n        <input\n          type=\"range\"\n          min={question.solution.range[0]}\n          max={question.solution.range[1]}\n          value={ansVal.answer as number}\n          onChange={onChangeVal}\n        />{\" \"}\n        {question.solution.range[1].toLocaleString()}\n      </label>\n      <div>your confidence: {ansVal.confidence * 100}%</div>\n      <label>\n        50%\n        <input\n          type=\"range\"\n          min={0.5}\n          max={1}\n          step={0.05}\n          value={ansVal.confidence}\n          onChange={onChangeConf}\n        />{\" \"}\n        100%\n      </label>\n    </div>\n  );\n};\nexport default NumEstimate;\n","import { Question } from \"./data\";\n\nconst questions: Question[] = [\n  {\n    prompt: \"Which population is larger?\",\n    solution: {\n      type: \"mcq\",\n      options: [\"Kolkata\", \"Moscow\"],\n      answer: 0,\n    },\n  },\n  {\n    prompt: \"Which population is larger?\",\n    solution: {\n      type: \"mcq\",\n      options: [\"Ecuador\", \"Shanghai\"],\n      answer: 1,\n    },\n  },\n  {\n    prompt: \"Which population is larger?\",\n    solution: {\n      type: \"mcq\",\n      options: [\"Tokyo\", \"Massachusetts\"],\n      answer: 0,\n    },\n  },\n  {\n    prompt: \"Which country is furthest north?\",\n    solution: {\n      type: \"mcq\",\n      options: [\"Uzbekistan\", \"Turkmenistan\", \"Kazakhstan\"],\n      answer: 2,\n    },\n  },\n  {\n    prompt: \"Which country is further south?\",\n    solution: {\n      type: \"mcq\",\n      options: [\"Uruguay\", \"Paraguay\"],\n      answer: 0,\n    },\n  },\n  /*{\n    prompt: \"Population of Nicaragua\",\n    solution: {\n      type: \"num\",\n      range: [2e4, 1e8],\n      answer: 6.546e6,\n    },\n  },\n  {\n    prompt: \"Population of Seoul\",\n    solution: {\n      type: \"num\",\n      range: [1e5, 1e8],\n      answer: 9.776e6,\n    },\n  },\n  {\n    prompt: \"Population of Brazil\",\n    solution: {\n      type: \"num\",\n      range: [1e5, 1e9],\n      answer: 211e6,\n    },\n  },\n  {\n    prompt: \"Population of Shanghai\",\n    solution: {\n      type: \"num\",\n      range: [1e5, 1e8],\n      answer: 26.32e6,\n    },\n  },\n  {\n    prompt: \"DARPA Budget ($)\",\n    solution: {\n      type: \"num\",\n      range: [1e6, 1e11],\n      answer: 3.427e9,\n    },\n  },*/\n];\nexport default questions;\n","import {\n  useFirestore,\n  useFirestoreCollectionData,\n  useFirestoreDocData,\n} from \"reactfire\";\nimport Mcq from \"../components/Mcq\";\nimport NumEstimate from \"../components/NumEstimate\";\nimport { Game, Member, PlayState, State } from \"../data\";\nimport questions from \"../questions\";\n\nconst GameComponent = ({ state }: { state: State }) => {\n  const gameRef = useFirestore().collection(\"games\").doc(state.currentGame);\n  const membersRef = gameRef.collection(\"members\");\n  const memberRef = membersRef.doc(state.self.uid);\n  const { status, data: game } = useFirestoreDocData<Game>(gameRef);\n  const { status: memberStatus, data: members } =\n    useFirestoreCollectionData<Member>(membersRef);\n  if (status !== \"success\" || memberStatus !== \"success\") {\n    return <div>loading...</div>;\n  }\n  const playState = game.state as PlayState;\n  const question = questions[playState.questions[playState.currentQuestionIdx]];\n  if (playState.showingScoreboard) {\n    return (\n      <div>\n        <h1>Scoreboard</h1>\n        <h2>{playState.currentTime} sec</h2>\n        {members.map((member) => (\n          <div key={member.uid}>\n            {member.name}: {member.score}\n          </div>\n        ))}\n      </div>\n    );\n  }\n  if (playState.gameOver) {\n    return (\n      <div>\n        <h1>Game over</h1>\n      </div>\n    );\n  }\n  return (\n    <div>\n      <h1>{question.prompt}</h1>\n      <h2>{playState.currentTime} sec</h2>\n      {question.solution.type === \"num\" ? (\n        <NumEstimate memberRef={memberRef} question={question} />\n      ) : (\n        <Mcq memberRef={memberRef} question={question} />\n      )}\n    </div>\n  );\n};\nexport default GameComponent;\n","import { Answer, Game, Member, PlayState } from \"./data\";\nimport { docRef, firestore } from \"./firebase\";\nimport questions from \"./questions\";\n\nexport const addQuestionToMemberStack = async (\n  gameRef: docRef,\n  questionIdx: number\n) => {\n  const question = questions[questionIdx];\n  const members = await gameRef.collection(\"members\").get();\n  const defaultAnswer: Answer = {\n    questionIdx,\n    answer:\n      question.solution.type === \"mcq\"\n        ? 0\n        : (question.solution.range[0] + question.solution.range[1]) / 2,\n    confidence: 0.7,\n  };\n  await members.forEach(async (doc) => {\n    const memberRef = await doc.ref;\n    await memberRef.update({\n      answers: firestore.FieldValue.arrayUnion(defaultAnswer),\n    });\n  });\n};\n\nconst computeScores = async (gameRef: docRef) => {\n  const members = await gameRef.collection(\"members\").get();\n  await members.forEach(async (doc) => {\n    const memberRef = await doc.ref;\n    const member = doc.data() as Member;\n    const lastAns = member.answers[member.answers.length - 1];\n    const question = questions[lastAns.questionIdx];\n    const score =\n      lastAns.answer === question.solution.answer\n        ? Math.log2(lastAns.confidence / 0.5)\n        : Math.log2((1 - lastAns.confidence) / 0.5);\n    await memberRef.update({\n      score: firestore.FieldValue.increment(score * 100),\n    });\n  });\n};\n\nexport const gameTick = async (gameRef: docRef, interval: NodeJS.Timeout) => {\n  const game = (await gameRef.get()).data() as Game;\n  const state = game.state as PlayState;\n  const gameOver =\n    state.currentTime === 1 &&\n    state.showingScoreboard &&\n    state.currentQuestionIdx === state.questions.length - 1;\n  const showingScoreboard =\n    state.currentTime === 1\n      ? !state.showingScoreboard\n      : state.showingScoreboard;\n  const incrementingQuestion =\n    state.currentTime === 1 && state.showingScoreboard;\n  const curQuestion = incrementingQuestion\n    ? Math.min(state.currentQuestionIdx + 1, state.questions.length - 1)\n    : state.currentQuestionIdx;\n  if (showingScoreboard && state.currentTime === 1) {\n    await computeScores(gameRef);\n  }\n  if (incrementingQuestion) {\n    await addQuestionToMemberStack(gameRef, state.questions[curQuestion]);\n  }\n  if (gameOver) {\n    clearInterval(interval);\n  }\n  await gameRef.update({\n    \"state.currentTime\":\n      state.currentTime === 1\n        ? game.timeAllotted\n        : firestore.FieldValue.increment(-1),\n    \"state.showingScoreboard\": showingScoreboard,\n    \"state.gameOver\": gameOver,\n    \"state.currentQuestionIdx\": curQuestion,\n  });\n};\n","import { useCallback, useEffect, useReducer, useRef, useState } from \"react\";\nimport { Game, Member, PlayState, reducer, ScreenState } from \"./data\";\nimport Home from \"./pages/Home\";\nimport { times, random, shuffle } from \"lodash\";\nimport Lobby from \"./pages/Lobby\";\nimport { auth, db } from \"./firebase\";\nimport GameComponent from \"./pages/GameComponent\";\nimport questions from \"./questions\";\nimport { addQuestionToMemberStack, gameTick } from \"./state\";\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, {\n    self: { userName: \"\", uid: \"\" },\n    screenState: ScreenState.HOME,\n    currentGame: \"\",\n  });\n  const interval = useRef<any>();\n  useEffect(() => {\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        dispatch({ type: \"SET_SELF\", self: { userName: \"\", uid: user.uid } });\n        console.log(`signed in as ${user.uid}`);\n      } else {\n        console.error(`user signed out`);\n      }\n    });\n  }, []);\n\n  const beginSubscription = useCallback(\n    (code?: string) => {\n      (async () => {\n        if (code) {\n          const ref = db.collection(\"games\").doc(code);\n          const game = await ref.get();\n          if (game.exists) {\n            const member: Member = {\n              uid: state.self.uid,\n              name: state.self.userName,\n              isAdmin: false,\n              isSpectator: false,\n              score: 0,\n              answers: [],\n            };\n            await ref.collection(\"members\").doc(member.uid).set(member);\n\n            dispatch({ type: \"SET_GAME\", game: code });\n            dispatch({ type: \"SET_SCREEN\", state: ScreenState.LOBBY });\n          } else {\n            alert(\"game doesn't exist\");\n          }\n        } else {\n          // https://stackoverflow.com/a/44622300/10833799\n          const randomCode = times(5, () => random(35).toString(36)).join(\"\");\n\n          const game: Game = {\n            code: randomCode,\n            admin: state.self.uid,\n            timeAllotted: 15,\n            numQuestions: 3,\n            state: { type: \"lobby\" },\n          };\n          const member: Member = {\n            uid: state.self.uid,\n            name: state.self.userName,\n            isAdmin: true,\n            isSpectator: false,\n            answers: [],\n            score: 0,\n          };\n          const ref = db.collection(\"games\").doc(randomCode);\n          await ref.set(game);\n          await ref.collection(\"members\").doc(member.uid).set(member);\n          dispatch({ type: \"SET_GAME\", game: randomCode });\n          dispatch({ type: \"SET_SCREEN\", state: ScreenState.LOBBY });\n        }\n      })();\n    },\n    [state, dispatch]\n  );\n\n  const onTick = useCallback(() => {\n    const ref = db.collection(\"games\").doc(state.currentGame);\n    gameTick(ref, interval.current);\n  }, [interval, state]);\n\n  const startGame = useCallback(() => {\n    (async () => {\n      const ref = db.collection(\"games\").doc(state.currentGame);\n      const game = (await ref.get()).data() as Game;\n      const gameState: PlayState = {\n        type: \"play\",\n        currentQuestionIdx: 0,\n        currentTime: game.timeAllotted,\n        questions: shuffle(questions.map((q, i) => i)).slice(\n          0,\n          game.numQuestions\n        ),\n        showingScoreboard: false,\n        gameOver: false,\n      };\n      await ref.update({ state: gameState });\n      await addQuestionToMemberStack(ref, gameState.questions[0]);\n      const int = setInterval(onTick, 1000);\n      interval.current = int;\n    })();\n  }, [state, onTick]);\n  return (\n    <div>\n      {state.screenState === ScreenState.HOME ? (\n        <Home\n          state={state}\n          dispatch={dispatch}\n          beginSubscription={beginSubscription}\n        />\n      ) : state.screenState === ScreenState.LOBBY ? (\n        <Lobby state={state} startGame={startGame} dispatch={dispatch} />\n      ) : state.screenState === ScreenState.GAME ? (\n        <GameComponent state={state} />\n      ) : (\n        <div />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { FirebaseAppProvider } from \"reactfire\";\nimport { app } from \"./firebase\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <FirebaseAppProvider firebaseApp={app}>\n      <App />\n    </FirebaseAppProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}