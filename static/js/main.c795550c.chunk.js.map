{"version":3,"sources":["data.ts","pages/Home.tsx","firebase.ts","state.ts","pages/Lobby.tsx","components/Mcq.tsx","components/NumEstimate.tsx","pages/GameComponent.tsx","questions.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ScreenState","reducer","prevState","action","type","self","screenState","state","currentGame","game","console","warn","Home","dispatch","beginSubscription","useState","gameCode","setGameCode","onChangeUsername","useCallback","e","userName","target","value","uid","placeholder","maxLength","onChange","style","padding","onClick","disabled","firebaseConfig","JSON","parse","process","app","firebase","initializeApp","auth","db","firestore","signInAnonymously","catch","err","log","addQuestionToMemberStack","gameRef","questionIdx","question","a","collection","get","members","defaultAnswer","answer","solution","range","confidence","forEach","doc","ref","memberRef","update","answers","FieldValue","arrayUnion","getDelta","member","lastAns","length","Math","log2","max","resetGameScores","score","computeScores","gameState","data","questions","increment","gameTick","interval","gameOver","showingScoreboard","currentQuestionIdx","currentTime","incrementingQuestion","curQuestion","min","clearInterval","timeAllotted","Lobby","startGame","useFirestore","membersRef","useFirestoreDocData","status","useFirestoreCollectionData","memberStatus","useEffect","GAME","resetScores","amAdmin","admin","code","numQuestions","map","backgroundColor","isAdmin","name","Mcq","changeMcq","updatedAnswers","parseInt","onChangeConf","parseFloat","shuffle","options","s","i","shuffledOpts","ansVal","width","checked","round","step","NumEstimate","onChangeVal","toLocaleString","GameComponent","LOBBY","playState","sortedMembers","orderBy","margin","fontWeight","color","prompt","generatePopulationQuestion","countryByPop","b","country","population","generateAreaQuestion","countryByArea","area","pickRandomQuestion","App","useReducer","HOME","useRef","onAuthStateChanged","user","error","exists","isSpectator","set","alert","randomCode","times","random","toString","join","onTick","current","int","setInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","firebaseApp","document","getElementById"],"mappings":"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","file":"static/js/main.c795550c.chunk.js","sourcesContent":["import React from \"react\";\n\nexport type Self = {\n  userName: string;\n  uid: string;\n};\n\nexport type Solution =\n  | { type: \"num\"; range: [number, number]; answer: number }\n  | { type: \"mcq\"; options: string[]; answer: number };\n\nexport type Question = {\n  prompt: string;\n  solution: Solution;\n};\n\nexport type PlayState = {\n  type: \"play\";\n  currentQuestionIdx: number;\n  questions: Question[];\n  currentTime: number;\n  showingScoreboard: boolean;\n  gameOver: boolean;\n};\n\nexport type LobbyState = {\n  type: \"lobby\";\n};\n\nexport type GameState = PlayState | LobbyState;\n\nexport type Answer = {\n  questionIdx: number;\n  answer: number;\n  confidence: number;\n};\n\nexport type Member = {\n  uid: string;\n  name: string;\n  isAdmin: boolean;\n  isSpectator: boolean;\n  score: number;\n  answers: Answer[];\n};\n\nexport type Game = {\n  code: string;\n  admin: string;\n  timeAllotted: number;\n  numQuestions: number;\n  state: GameState;\n};\n\nexport enum ScreenState {\n  HOME,\n  LOBBY,\n  GAME,\n}\n\nexport type State = {\n  self: Self;\n  screenState: ScreenState;\n  currentGame: string;\n};\n\nexport type Action =\n  | {\n      type: \"SET_SELF\";\n      self: Self;\n    }\n  | { type: \"SET_SCREEN\"; state: ScreenState }\n  | { type: \"SET_GAME\"; game: string };\n\nexport type Dispatch = React.Dispatch<Action>;\n\nexport const reducer = (prevState: State, action: Action): State => {\n  switch (action.type) {\n    case \"SET_SELF\":\n      return { ...prevState, self: action.self };\n    case \"SET_SCREEN\":\n      return { ...prevState, screenState: action.state };\n    case \"SET_GAME\":\n      return { ...prevState, currentGame: action.game };\n    default:\n      console.warn(\"reducer fallthrough\");\n      return prevState;\n  }\n};\n","import { useCallback, useState } from \"react\";\nimport { Dispatch, State } from \"../data\";\n\nconst Home = ({\n  state,\n  dispatch,\n  beginSubscription,\n}: {\n  state: State;\n  dispatch: Dispatch;\n  beginSubscription: (code?: string) => void;\n}) => {\n  const [gameCode, setGameCode] = useState(\"\");\n  const onChangeUsername = useCallback(\n    (e) => {\n      dispatch({\n        type: \"SET_SELF\",\n        self: { ...state.self, userName: e.target.value },\n      });\n    },\n    [dispatch, state]\n  );\n  return (\n    <div>\n      <h1>Credence Calibration</h1>\n      {state.self.uid === \"\" ? (\n        \"waiting for firebase...\"\n      ) : (\n        <div>\n          <div>\n            <label>\n              My username{\" \"}\n              <input\n                type=\"text\"\n                placeholder=\"username\"\n                maxLength={30}\n                value={state.self.userName}\n                onChange={onChangeUsername}\n              />\n            </label>\n          </div>\n\n          <div style={{ padding: \"1em\" }}>\n            <label>\n              game code{\" \"}\n              <input\n                type=\"text\"\n                value={gameCode}\n                onChange={(e) => setGameCode(e.target.value)}\n                maxLength={20}\n                placeholder=\"game code\"\n              />\n            </label>\n            <button\n              onClick={() => beginSubscription(gameCode)}\n              disabled={state.self.userName === \"\" || gameCode === \"\"}\n            >\n              Join Game\n            </button>\n          </div>\n          <div style={{ padding: \"1em\" }}>\n            <button\n              onClick={() => beginSubscription()}\n              disabled={state.self.userName === \"\"}\n            >\n              Create Game\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default Home;\n","import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = JSON.parse(process.env.REACT_APP_FIREBASE ?? \"{}\");\nexport const app = firebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const db = firebase.firestore();\nexport const firestore = firebase.firestore;\nexport type docRef =\n  firebase.firestore.DocumentReference<firebase.firestore.DocumentData>;\n\nauth.signInAnonymously().catch((err) => console.log(err));\n","import { Answer, Game, Member, PlayState, Question } from \"./data\";\nimport { docRef, firestore } from \"./firebase\";\n\nexport const addQuestionToMemberStack = async (\n  gameRef: docRef,\n  questionIdx: number,\n  question: Question\n) => {\n  const members = await gameRef.collection(\"members\").get();\n  const defaultAnswer: Answer = {\n    questionIdx,\n    answer:\n      question.solution.type === \"mcq\"\n        ? 0\n        : (question.solution.range[0] + question.solution.range[1]) / 2,\n    confidence: 0.7,\n  };\n  await members.forEach(async (doc) => {\n    const memberRef = await doc.ref;\n    await memberRef.update({\n      answers: firestore.FieldValue.arrayUnion(defaultAnswer),\n    });\n  });\n};\n\nexport const getDelta = (question: Question, member: Member) => {\n  const lastAns = member.answers[member.answers.length - 1];\n  const score =\n    lastAns.answer === question.solution.answer\n      ? Math.log2(lastAns.confidence / 0.5)\n      : Math.max(Math.log2((1 - lastAns.confidence) / 0.5), -50);\n  return score * 100;\n};\n\nexport const resetGameScores = async (gameRef: docRef) => {\n  const members = await gameRef.collection(\"members\").get();\n  await members.forEach(async (doc) => {\n    const memberRef = await doc.ref;\n    await memberRef.update({\n      score: 0,\n    });\n  });\n};\n\nconst computeScores = async (gameRef: docRef, gameState: PlayState) => {\n  const members = await gameRef.collection(\"members\").get();\n  await members.forEach(async (doc) => {\n    const memberRef = await doc.ref;\n    const member = doc.data() as Member;\n    const lastAns = member.answers[member.answers.length - 1];\n    const question = gameState.questions[lastAns.questionIdx];\n    await memberRef.update({\n      score: firestore.FieldValue.increment(getDelta(question, member)),\n    });\n  });\n};\n\nexport const gameTick = async (gameRef: docRef, interval: NodeJS.Timeout) => {\n  const game = (await gameRef.get()).data() as Game;\n  const state = game.state as PlayState;\n  const gameOver =\n    state.showingScoreboard &&\n    state.currentQuestionIdx === state.questions.length - 1;\n  const showingScoreboard =\n    state.currentTime === 1\n      ? !state.showingScoreboard\n      : state.showingScoreboard;\n  const incrementingQuestion =\n    state.currentTime === 1 && state.showingScoreboard;\n  const curQuestion = incrementingQuestion\n    ? Math.min(state.currentQuestionIdx + 1, state.questions.length - 1)\n    : state.currentQuestionIdx;\n  if (showingScoreboard && state.currentTime === 1) {\n    await computeScores(gameRef, state);\n  }\n  if (incrementingQuestion) {\n    await addQuestionToMemberStack(\n      gameRef,\n      curQuestion,\n      state.questions[curQuestion]\n    );\n  }\n  if (gameOver && state.currentTime === 1) {\n    clearInterval(interval);\n    await gameRef.update({\n      state: { type: \"lobby\" },\n    });\n  } else {\n    await gameRef.update({\n      \"state.currentTime\":\n        state.currentTime === 1\n          ? game.timeAllotted\n          : firestore.FieldValue.increment(-1),\n      \"state.showingScoreboard\": showingScoreboard,\n      \"state.gameOver\": gameOver,\n      \"state.currentQuestionIdx\": curQuestion,\n    });\n  }\n};\n","import { useCallback, useEffect } from \"react\";\nimport {\n  useFirestore,\n  useFirestoreCollectionData,\n  useFirestoreDocData,\n} from \"reactfire\";\nimport { Dispatch, Game, Member, ScreenState, State } from \"../data\";\nimport { resetGameScores } from \"../state\";\n\nconst Lobby = ({\n  state,\n  dispatch,\n  startGame,\n}: {\n  state: State;\n  dispatch: Dispatch;\n  startGame: () => void;\n}) => {\n  const gameRef = useFirestore().collection(\"games\").doc(state.currentGame);\n  const membersRef = gameRef.collection(\"members\");\n  const { status, data: game } = useFirestoreDocData<Game>(gameRef);\n  const { status: memberStatus, data: members } =\n    useFirestoreCollectionData<Member>(membersRef);\n  useEffect(() => {\n    if (game && game.state.type === \"play\") {\n      dispatch({ type: \"SET_SCREEN\", state: ScreenState.GAME });\n    }\n  }, [game, dispatch]);\n  const resetScores = useCallback(() => {\n    resetGameScores(gameRef);\n  }, [gameRef]);\n  if (status !== \"success\" || memberStatus !== \"success\") {\n    return <div>loading...</div>;\n  }\n\n  const amAdmin = game.admin === state.self.uid;\n  return (\n    <div>\n      <h1>Lobby</h1>\n      <h2>code {game.code}</h2>\n      <h2>\n        there will be {game.numQuestions} questions with {game.timeAllotted}{\" \"}\n        seconds per question\n      </h2>\n      {amAdmin && <button onClick={startGame}>start game</button>}\n      {amAdmin && <button onClick={resetScores}>reset scores</button>}\n      <div>\n        {members.map((member) => (\n          <div\n            key={member.uid}\n            style={{\n              backgroundColor: member.isAdmin ? \"#ffe70b7f\" : \"rgba(0,0,0,0)\",\n            }}\n          >\n            {member.name} (score: {member.score})\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Lobby;\n","import { shuffle } from \"lodash\";\nimport { useCallback, useState } from \"react\";\nimport { useFirestoreDocData } from \"reactfire\";\nimport { Member, Question } from \"../data\";\nimport { docRef } from \"../firebase\";\nconst Mcq = ({\n  question,\n  memberRef,\n}: {\n  question: Question;\n  memberRef: docRef;\n}) => {\n  const { data, status } = useFirestoreDocData<Member>(memberRef);\n  const changeMcq = useCallback(\n    (e) => {\n      const updatedAnswers = [...data.answers];\n      updatedAnswers[updatedAnswers.length - 1] = {\n        ...updatedAnswers[updatedAnswers.length - 1],\n        answer: parseInt(e.target.value, 10),\n      };\n      memberRef.update({ answers: updatedAnswers });\n    },\n    [memberRef, data]\n  );\n  const onChangeConf = useCallback(\n    (e) => {\n      const updatedAnswers = [...data.answers];\n      updatedAnswers[updatedAnswers.length - 1] = {\n        ...updatedAnswers[updatedAnswers.length - 1],\n        confidence: parseFloat(e.target.value),\n      };\n      memberRef.update({ answers: updatedAnswers });\n    },\n    [memberRef, data]\n  );\n  const [shuffledOpts, setShuffledOpts] = useState(\n    question.solution.type === \"mcq\"\n      ? shuffle(question.solution.options.map((s, i) => ({ s, i })))\n      : []\n  );\n  if (status !== \"success\" || data.answers.length < 1) {\n    return <div>loading...</div>;\n  }\n\n  const ansVal = data.answers[data.answers.length - 1];\n  return (\n    <div>\n      <div>\n        {shuffledOpts.map(({ s, i }) => (\n          <div key={s + i}>\n            <label style={{ width: \"100%\" }}>\n              <input\n                type=\"radio\"\n                value={i}\n                checked={ansVal.answer === i}\n                onChange={changeMcq}\n              />{\" \"}\n              {s}\n            </label>\n          </div>\n        ))}\n      </div>\n      <div>your confidence: {Math.round(ansVal.confidence * 100)}%</div>\n      <label>\n        50%\n        <input\n          type=\"range\"\n          min={0.5}\n          max={1}\n          step={0.05}\n          value={ansVal.confidence}\n          onChange={onChangeConf}\n        />{\" \"}\n        100%\n      </label>\n    </div>\n  );\n};\nexport default Mcq;\n","import { useCallback } from \"react\";\nimport { useFirestoreDocData } from \"reactfire\";\nimport { Member, Question } from \"../data\";\nimport { docRef } from \"../firebase\";\n\nconst NumEstimate = ({\n  question,\n  memberRef,\n}: {\n  question: Question;\n  memberRef: docRef;\n}) => {\n  const { data, status } = useFirestoreDocData<Member>(memberRef);\n  const onChangeVal = useCallback(\n    (e) => {\n      const updatedAnswers = [...data.answers];\n      updatedAnswers[updatedAnswers.length - 1] = {\n        ...updatedAnswers[updatedAnswers.length - 1],\n        answer: parseInt(e.target.value, 10),\n      };\n      memberRef.update({ answers: updatedAnswers });\n    },\n    [memberRef, data]\n  );\n  const onChangeConf = useCallback(\n    (e) => {\n      const updatedAnswers = [...data.answers];\n      updatedAnswers[updatedAnswers.length - 1] = {\n        ...updatedAnswers[updatedAnswers.length - 1],\n        confidence: parseFloat(e.target.value),\n      };\n      memberRef.update({ answers: updatedAnswers });\n    },\n    [memberRef, data]\n  );\n  if (status !== \"success\" || data.answers.length < 1) {\n    return <div>loading...</div>;\n  }\n  if (question.solution.type !== \"num\") {\n    return <div>error</div>;\n  }\n  const ansVal = data.answers[data.answers.length - 1];\n  return (\n    <div>\n      <div>your estimate: {ansVal.answer.toLocaleString()}</div>\n      <label>\n        {question.solution.range[0].toLocaleString()}{\" \"}\n        <input\n          type=\"range\"\n          min={question.solution.range[0]}\n          max={question.solution.range[1]}\n          value={ansVal.answer as number}\n          onChange={onChangeVal}\n        />{\" \"}\n        {question.solution.range[1].toLocaleString()}\n      </label>\n      <div>your confidence: {ansVal.confidence * 100}%</div>\n      <label>\n        50%\n        <input\n          type=\"range\"\n          min={0.5}\n          max={1}\n          step={0.05}\n          value={ansVal.confidence}\n          onChange={onChangeConf}\n        />{\" \"}\n        100%\n      </label>\n    </div>\n  );\n};\nexport default NumEstimate;\n","import { orderBy } from \"lodash\";\nimport { useEffect } from \"react\";\nimport {\n  useFirestore,\n  useFirestoreCollectionData,\n  useFirestoreDocData,\n} from \"reactfire\";\nimport Mcq from \"../components/Mcq\";\nimport NumEstimate from \"../components/NumEstimate\";\nimport { Dispatch, Game, Member, PlayState, ScreenState, State } from \"../data\";\nimport { getDelta } from \"../state\";\n\nconst GameComponent = ({\n  state,\n  dispatch,\n}: {\n  state: State;\n  dispatch: Dispatch;\n}) => {\n  const gameRef = useFirestore().collection(\"games\").doc(state.currentGame);\n  const membersRef = gameRef.collection(\"members\");\n  const memberRef = membersRef.doc(state.self.uid);\n  const { status, data: game } = useFirestoreDocData<Game>(gameRef);\n  const { status: memberStatus, data: members } =\n    useFirestoreCollectionData<Member>(membersRef);\n  useEffect(() => {\n    if (game.state.type === \"lobby\") {\n      dispatch({ type: \"SET_SCREEN\", state: ScreenState.LOBBY });\n    }\n  }, [game, dispatch]);\n  if (status !== \"success\" || memberStatus !== \"success\") {\n    return <div>loading...</div>;\n  }\n  if (game.state.type !== \"play\") {\n    return <div />;\n  }\n\n  const playState = game.state as PlayState;\n  const question = playState.questions[playState.currentQuestionIdx];\n  const sortedMembers = orderBy(members, \"score\", \"desc\");\n  if (playState.showingScoreboard || playState.gameOver) {\n    return (\n      <div>\n        {playState.gameOver && <h1>Game Over, {sortedMembers[0].name} wins</h1>}\n        <h1>Scoreboard</h1>\n        <h2>\n          correct answer was{\" \"}\n          {question.solution.type === \"mcq\"\n            ? question.solution.options[question.solution.answer]\n            : question.solution.answer}\n        </h2>\n        <h2>{playState.currentTime} sec</h2>\n        {sortedMembers.map((member) => (\n          <div key={member.uid} style={{ margin: \"1em\" }}>\n            <span\n              style={{\n                fontWeight: member.uid === state.self.uid ? \"bold\" : \"normal\",\n              }}\n            >\n              {member.name}\n            </span>\n            : {Math.round(member.score)}{\" \"}\n            <span\n              style={{\n                color:\n                  getDelta(question, member) > 0\n                    ? \"rgb(159, 255, 159)\"\n                    : \"#ff8856\",\n              }}\n            >\n              ({getDelta(question, member) > 0 && \"+\"}\n              {Math.round(getDelta(question, member))})\n            </span>\n          </div>\n        ))}\n      </div>\n    );\n  }\n  return (\n    <div>\n      <h1>{question.prompt}</h1>\n      <h2>{playState.currentTime} sec</h2>\n      {question.solution.type === \"num\" ? (\n        <NumEstimate memberRef={memberRef} question={question} />\n      ) : (\n        <Mcq memberRef={memberRef} question={question} />\n      )}\n    </div>\n  );\n};\nexport default GameComponent;\n","import { Question } from \"./data\";\nimport countryByPop from \"country-json/src/country-by-population.json\";\nimport countryByArea from \"country-json/src/country-by-surface-area.json\";\nimport { shuffle } from \"lodash\";\n\nexport const generatePopulationQuestion = (): Question => {\n  const [a, b] = shuffle(countryByPop);\n  return {\n    prompt: \"Which population is larger?\",\n    solution: {\n      type: \"mcq\",\n      options: [a.country, b.country],\n      answer: a.population > b.population ? 0 : 1,\n    },\n  };\n};\nexport const generateAreaQuestion = (): Question => {\n  const [a, b] = shuffle(countryByArea);\n  return {\n    prompt: \"Which country's area is larger?\",\n    solution: {\n      type: \"mcq\",\n      options: [a.country, b.country],\n      answer: a.area > b.area ? 0 : 1,\n    },\n  };\n};\n\nexport const pickRandomQuestion = (): Question =>\n  shuffle([generateAreaQuestion, generatePopulationQuestion])[0]();\n","import { useCallback, useEffect, useReducer, useRef } from \"react\";\nimport { Game, Member, PlayState, reducer, ScreenState } from \"./data\";\nimport Home from \"./pages/Home\";\nimport { times, random, shuffle } from \"lodash\";\nimport Lobby from \"./pages/Lobby\";\nimport { auth, db } from \"./firebase\";\nimport GameComponent from \"./pages/GameComponent\";\nimport { addQuestionToMemberStack, gameTick } from \"./state\";\nimport { pickRandomQuestion } from \"./questions\";\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, {\n    self: { userName: \"\", uid: \"\" },\n    screenState: ScreenState.HOME,\n    currentGame: \"\",\n  });\n  const interval = useRef<any>();\n  useEffect(() => {\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        dispatch({ type: \"SET_SELF\", self: { userName: \"\", uid: user.uid } });\n        console.log(`signed in as ${user.uid}`);\n      } else {\n        console.error(`user signed out`);\n      }\n    });\n  }, []);\n\n  const beginSubscription = useCallback(\n    (code?: string) => {\n      (async () => {\n        if (code) {\n          const ref = db.collection(\"games\").doc(code);\n          const game = await ref.get();\n          if (game.exists) {\n            const member: Member = {\n              uid: state.self.uid,\n              name: state.self.userName,\n              isAdmin: false,\n              isSpectator: false,\n              score: 0,\n              answers: [],\n            };\n            await ref.collection(\"members\").doc(member.uid).set(member);\n\n            dispatch({ type: \"SET_GAME\", game: code });\n            dispatch({ type: \"SET_SCREEN\", state: ScreenState.LOBBY });\n          } else {\n            alert(\"game doesn't exist\");\n          }\n        } else {\n          // https://stackoverflow.com/a/44622300/10833799\n          const randomCode = times(5, () => random(35).toString(36)).join(\"\");\n\n          const game: Game = {\n            code: randomCode,\n            admin: state.self.uid,\n            timeAllotted: 10,\n            numQuestions: 8,\n            state: { type: \"lobby\" },\n          };\n          const member: Member = {\n            uid: state.self.uid,\n            name: state.self.userName,\n            isAdmin: true,\n            isSpectator: false,\n            answers: [],\n            score: 0,\n          };\n          const ref = db.collection(\"games\").doc(randomCode);\n          await ref.set(game);\n          await ref.collection(\"members\").doc(member.uid).set(member);\n          dispatch({ type: \"SET_GAME\", game: randomCode });\n          dispatch({ type: \"SET_SCREEN\", state: ScreenState.LOBBY });\n        }\n      })();\n    },\n    [state, dispatch]\n  );\n\n  const onTick = useCallback(() => {\n    const ref = db.collection(\"games\").doc(state.currentGame);\n    gameTick(ref, interval.current);\n  }, [interval, state]);\n\n  const startGame = useCallback(() => {\n    (async () => {\n      const ref = db.collection(\"games\").doc(state.currentGame);\n      const game = (await ref.get()).data() as Game;\n      const gameState: PlayState = {\n        type: \"play\",\n        currentQuestionIdx: 0,\n        currentTime: game.timeAllotted,\n        questions: shuffle(times(game.numQuestions, pickRandomQuestion)),\n        showingScoreboard: false,\n        gameOver: false,\n      };\n      await ref.update({ state: gameState });\n      await addQuestionToMemberStack(ref, 0, gameState.questions[0]);\n      const int = setInterval(onTick, 1000);\n      interval.current = int;\n    })();\n  }, [state, onTick]);\n  return (\n    <div>\n      {state.screenState === ScreenState.HOME ? (\n        <Home\n          state={state}\n          dispatch={dispatch}\n          beginSubscription={beginSubscription}\n        />\n      ) : state.screenState === ScreenState.LOBBY ? (\n        <Lobby state={state} startGame={startGame} dispatch={dispatch} />\n      ) : state.screenState === ScreenState.GAME ? (\n        <GameComponent state={state} dispatch={dispatch} />\n      ) : (\n        <div />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { FirebaseAppProvider } from \"reactfire\";\nimport { app } from \"./firebase\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <FirebaseAppProvider firebaseApp={app}>\n      <App />\n    </FirebaseAppProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}